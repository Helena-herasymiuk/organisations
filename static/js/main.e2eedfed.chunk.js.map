{"version":3,"sources":["components/Header.js","components/main/Search.js","components/main/Organisation.js","components/main/User.js","components/service.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Search","props","type","onChange","handleSearch","Organisation","User","API_URL","PhonesService","getAll","_getAll","Object","asyncToGenerator","regenerator_default","mark","_callee","query","result","response","filteredResult","_args","arguments","wrap","_context","prev","next","length","undefined","window","fetch","sent","json","t0","filter","org","login","toLowerCase","includes","abrupt","stop","apply","this","getById","id","then","Main","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","target","value","filtredOrgs","state","orgs","setState","searchedOrgs","searched","map","i","key","console","log","main_Search","renderSearchedOrgs","main_Organisation","main_User","React","Component","App","className","components_Header","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2eedfed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n\treturn(\r\n\t\t<header>\r\n\t\t  <h1> Organisations </h1>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\n\r\nfunction Search(props) {\r\n\treturn(\r\n\t\t<div>\r\n\t\t  <h1> Search </h1>\r\n      <input type=\"text\"\r\n             onChange={props.handleSearch}>\r\n      </input>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nfunction Organisation() {\r\n\treturn(\r\n\t\t<div>\r\n\t\t  <h1> Organisation </h1>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Organisation;\r\n","import React from 'react';\r\n\r\nfunction User() {\r\n\treturn(\r\n\t\t<div>\r\n      <h1> User </h1>\r\n    </div>\r\n\t)\r\n}\r\n\r\nexport default User;\r\n","const API_URL = 'https://api.github.com';\r\n\r\nconst PhonesService = {\r\n  async getAll(query = '') {\r\n    let result;\r\n    try {\r\n      const response = await window.fetch(API_URL + '/organizations?page=1&per_page=100');\r\n      result = await response.json();\r\n    } catch (error) {\r\n      result = [];\r\n    }\r\n    const filteredResult = result.filter((org) => {\r\n      return org.login.toLowerCase().includes(query.toLowerCase());\r\n    });\r\n\r\n    return filteredResult;\r\n  },\r\n  getById(id) {\r\n    return window.fetch(API_URL + '/orgs/' + id)\r\n      .then((response) => response.json())\r\n  }\r\n}\r\nexport default PhonesService;","import React from 'react';\r\nimport Search from './main/Search'\r\nimport Organisation from './main/Organisation'\r\nimport User from './main/User'\r\nimport PhonesService from './service'\r\n\r\nclass Main extends React.Component {\r\n    constructor() {\r\n    super();\r\n    this.state={\r\n      orgs: [],\r\n      searchedOrgs: []\r\n    }\r\n  \r\n\t}\r\n\r\n  async componentDidMount() {\r\n    const orgs = await PhonesService.getAll()\r\n      this.setState({\r\n        orgs: orgs\r\n      })\r\n  }\r\n\r\n  handleSearch = (event) =>{\r\n    const target =  event.target.value;\r\n    const filtredOrgs = this.state.orgs.filter((org) => {\r\n      return org.login.toLowerCase().includes(target.toLowerCase());\r\n    });\r\n    this.setState({\r\n        searchedOrgs: filtredOrgs\r\n    })\r\n  }\r\n\r\n  renderSearchedOrgs(){\r\n    const searched = this.state.searchedOrgs;\r\n    return searched.map((org, i ) => <div key={i}>{org.login}</div>);\r\n    console.log(searched)\r\n  }\r\n\r\n  render(){\r\n    console.log(this.state.searchedOrgs.login)\r\n\t  return(\r\n\t\t  <main>\r\n        <Search handleSearch={this.handleSearch}/>\r\n        <div> {this.renderSearchedOrgs()}</div>\r\n        <Organisation />\r\n        <User />\r\n\t\t  </main>\r\n\t)}\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header.js'\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}